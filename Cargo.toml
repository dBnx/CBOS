[package]
name = "cbos"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[[test]]
name = "should_panic"
harness = false

[[test]]
name = "stack_overflow"
harness = false

[dependencies]
#bootloader = "0.10.12"
#volatile = "0.4.4"
volatile = "0.2.6"
bootloader = { version = "0.9.8", features = ["map_physical_memory"] }
spin = "0.9.4"
x86_64 = "0.14.2"
uart_16550 = "0.2.0"
pic8259 = "0.10.1"
pc-keyboard = "0.5.0"
linked_list_allocator = "0.10.3"
#linked_list_allocator = "0.9.0"
#
[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"]
#
[dependencies.crossbeam-queue]
version = "0.3.6"
default-features = false
features = ["alloc"]
#
[dependencies.conquer-once]
version = "0.3.2"
default-features = false
#
[dependencies.futures-util]
version = "0.3.24"
default-features = false
features = ["alloc"]

[package.metadata.bootimage]
test-args = [
  "-device",
  "isa-debug-exit,iobase=0xf4,iosize=0x04",
  "-serial",
  "stdio",
  "-display",
  "none",
]
test-success-exit-code = 33 # (0x10 << 1) | 1

[package.metadata.bootloader]
# The address at which the kernel stack is placed. If not provided, the bootloader
# dynamically searches for a location.
#kernel-stack-address = "0xFFFFFF8000000000"

# The size of the kernel stack, given in number of 4KiB pages. Defaults to 512.
kernel-stack-size = 512

# The virtual address offset from which physical memory is mapped, as described in
# https://os.phil-opp.com/paging-implementation/#map-the-complete-physical-memory
# Only applies if the `map_physical_memory` feature of the crate is enabled.
# If not provided, the bootloader dynamically searches for a location.
#physical-memory-offset = "0xFFFF800000000000"

# The address at which the bootinfo struct will be placed. if not provided,
# the bootloader will dynamically search for a location.
#boot-info-address = "0xFFFFFFFF80000000"
